/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mgrepclient;

import org.junit.Test;
import static org.junit.Assert.*;

import java.net.*;
import java.io.*;
import java.util.*;

class MgrepClientThread extends Thread {
	String text, url;
	int loop;
	public MgrepClientThread(String text, String url, int loop) {
		this.text = text;
		this.url = url;
		this.loop = loop;
	}
	public void run() {
		try {
			MgrepConnection mgrep = new MgrepConnection(url);
			for (int i=0; i<loop; i++) {
				Vector<MgrepResult> result = mgrep.annotate(true, 0, true, text);
				StringBuffer sb = new StringBuffer();
				for (MgrepResult v : result) {
					sb.append(v.getDictionaryId());
					sb.append('\t');
					sb.append(v.getLocationFrom());
					sb.append('\t');
					sb.append(v.getLocationTo());
					sb.append('\t');
					sb.append(v.getText());
					sb.append('\n');
				}
				assertEquals(sb.toString(), "1\t1\t5\thello\n2\t7\t11\tworld\n");
			}
			mgrep.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

public class MgrepTest {
	@Test public void simpleTest() throws UnknownHostException, IOException, MgrepException, InterruptedException {
		MgrepConnection mgrep = new MgrepConnection("localhost:55555");
		Vector<MgrepResult> result = mgrep.annotate(true, 0, true, "hello world");
		StringBuffer sb = new StringBuffer();
		for (MgrepResult v : result) {
			sb.append(v.getDictionaryId());
			sb.append('\t');
			sb.append(v.getLocationFrom());
			sb.append('\t');
			sb.append(v.getLocationTo());
			sb.append('\t');
			sb.append(v.getText());
			sb.append('\n');
		}
		assertEquals(sb.toString(), "1\t1\t5\thello\n2\t7\t11\tworld\n");
		mgrep.close();
	}
	@Test public void ThreadTest() throws UnknownHostException, IOException, MgrepException, InterruptedException {
		int THREAD = 100;
		MgrepClientThread[] thrs = new MgrepClientThread[THREAD];
		for (int i=0; i<THREAD; i++) thrs[i] = new MgrepClientThread("hello world", "localhost:55555", 100);
		for (int i=0; i<THREAD; i++) thrs[i].start();
		for (int i=0; i<THREAD; i++) thrs[i].join();
	}
}
